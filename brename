#!/usr/bin/perl -w
#
# Copyright (c) 2011, Daniel Bolgheroni. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# 
#   1. Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#   2. Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in
#      the documentation and/or other materials provided with the
#      distribution.
# 
# THIS SOFTWARE IS PROVIDED BY DANIEL BOLGHERONI ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL DANIEL BOLGHERONI OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Version: 0.2
# Date: 20110906

use strict;
use Getopt::Std;

my ($file, $n, $number, $extension);

# declares -j jump argument, but not using it yet
our ($opt_p, $opt_d, $opt_0, $opt_j);
getopts('g:p:d0j:'); # instead of the simpler getopt

# handle missing arguments and error codes
if (!$ARGV[0] && $opt_p) {
    print_usage();
    exit(1);
} elsif ($ARGV[0] && !$opt_p) {
    print_usage();
    exit(2);
} elsif (!$ARGV[0] && !$opt_p) {
    print_usage();
    exit(3);
}

# treats the -0 argument
if ($opt_0) {
    $n = 0;
} else {
    $n = 1;
}

foreach $file (@ARGV) {
    $number = sprintf("%02d", $n);

    # compute extension once
    if ($n <= 1) {
	$extension = $ARGV[0];
	$extension =~ s/.*\.//;
    }

    print ("$file -> $opt_p$number.$extension\n");
    # treats the -d argument
    if (!$opt_d) {
	rename ($file, "$opt_p$number.$extension") ||
	    die ("can't rename: $!\n");
    }

    $n++;
}

sub print_usage {
    print "usage: $0 [-d] -pPATTERN [file ...]\n";
}
